import { BigNumber, Contract, ethers, Signer } from 'ethers';
import { ICollateralDeposited, IInterestRates } from './utils/types';
export declare class LendingPool {
    private provider;
    private address;
    private signer;
    contract: Contract;
    constructor(provider: ethers.providers.WebSocketProvider, address: string, signer: Signer);
    /**
     * Initializes the contract instance.
     */
    private initiateContract;
    addCollateral(token: string, amount: BigNumber): Promise<void>;
    approve(spender: string, amount: BigNumber): Promise<void>;
    depositAsset(assets: BigNumber, receiver: string): Promise<void>;
    mintAsset(shares: BigNumber, receiver: string): Promise<void>;
    putAmount(amount: BigNumber): Promise<void>;
    putShares(shares: BigNumber): Promise<void>;
    redeem(shares: BigNumber, receiver: string, owner: string): Promise<void>;
    removeCollateral(token: string, amount: BigNumber): Promise<void>;
    renounceOwnerShip(): Promise<void>;
    setGauge(_gauge: string): Promise<void>;
    supply(amount: BigNumber, receiver: string, useAsCollateral: boolean): Promise<void>;
    take(amount: BigNumber): Promise<void>;
    transfer(to: string, amount: BigNumber): Promise<void>;
    transferFrom(from: string, to: string, amount: BigNumber): Promise<void>;
    transferOwnership(newOwner: string): Promise<void>;
    withdraw(assetAmount: BigNumber, receiver: string, owner: string): Promise<void>;
    accountAssetsBorrowed(account: string): Promise<BigNumber>;
    accountCollateralAmount(account: string, collateral: string): Promise<BigNumber>;
    accountCollateralDeposited(account: string, collateral: string): Promise<ICollateralDeposited>;
    accountCollateralTokenIds(account: string, collateral: string): Promise<{
        tokenIds: BigNumber[];
    }>;
    accountHealth(account: string): Promise<BigNumber>;
    allowance(account: string, spender: string): Promise<BigNumber>;
    asset(): Promise<string>;
    assetBalance(account: string): Promise<BigNumber>;
    available(): Promise<BigNumber>;
    balanceOf(account: string): Promise<BigNumber>;
    baseBorrowAPY(): Promise<BigNumber>;
    baseSupplyAPY(): Promise<BigNumber>;
    borrowed(): Promise<BigNumber>;
    characterization(): Promise<string>;
    collateralAllowed(collateral: string): Promise<boolean>;
    collateralFactor(collateral: string): Promise<BigNumber>;
    collateralTokenList(collateral: string): Promise<string>;
    collateralTokenTypes(collateral: string): Promise<number>;
    collaterals(collateral: string): Promise<string[]>;
    convertToAssets(shares: BigNumber): Promise<BigNumber>;
    convertToShares(assets: BigNumber): Promise<BigNumber>;
    debtToken(): Promise<string>;
    decimals(): Promise<number>;
    feesPaid(): Promise<BigNumber>;
    gauge(): Promise<string>;
    getTokenCollateralValue(token: string, amount: BigNumber): Promise<BigNumber>;
    getTokenMarketValue(token: string, amount: BigNumber): Promise<BigNumber>;
    interestRateModel(): Promise<string>;
    interestRates(): Promise<IInterestRates>;
    maxDeposit(amount: BigNumber): Promise<BigNumber>;
    maxMint(amount: BigNumber): Promise<BigNumber>;
    maxRedeem(owner: string): Promise<BigNumber>;
    maxWithdraw(owner: string): Promise<BigNumber>;
    name(): Promise<string>;
    owner(): Promise<BigNumber>;
    nonces(address: string): Promise<BigNumber>;
    poolAsset(): Promise<string>;
    previewDeposit(assets: BigNumber): Promise<BigNumber>;
    previewMint(shares: BigNumber): Promise<BigNumber>;
    previewRedeem(shares: BigNumber): Promise<BigNumber>;
    previewWithdraw(assets: BigNumber): Promise<BigNumber>;
    priceFeed(): Promise<string>;
    supplied(): Promise<BigNumber>;
    symbol(): Promise<string>;
    tokenCollateralDeposited(collateral: string): Promise<BigNumber>;
    totalAccountCollateralValue(account: string): Promise<BigNumber>;
    totalAssets(): Promise<BigNumber>;
    totalSupply(): Promise<BigNumber>;
    tvl(): Promise<BigNumber>;
    utilization(): Promise<BigNumber>;
}
